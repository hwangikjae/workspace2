buildscript {
    //ext : build.gradle에서 사용하는 전역변수를 설정하겠다는 의미.
    // 여기에서는 springBootVersion 전역변수를 생성하고, 그 값을 2.1.7.RELEASE로 하겠다는 의미이다.
    // 즉 spring-boot-gradle-plugin라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다.
    ext{
        springBootVersion = '2.1.7.RELEASE'
    }
    //repositories는 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지 정한다.
//기본적으로 mavenCentral을 많이 사용하지만 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용 한다.
//jcenter : 라이브러리업로드를 간단하게...
// 여기서는 둘다 등록해서 사용.
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
//위의 코드들은 프로젝트의 플러그인 의존성 관리를 위한 설정이다.

//앞서 설정한 플러그인 의존성을 적용할 것인지를 결정하는 코드다.
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' //스프링 부트의 의존성을 관리해 주는 플러그인이라 꼭!!! 추가

group 'com.jojoldu.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')//스프링 부트용 spring data jpa 추상화 라이브러리, 스프링 부트 버전에 맞춰 자동으로 jpa 관련 라이브러리들의 버전 관리해준다.
    compile('com.h2database:h2')//인메모리 관계형 데이터베이스. 별도 설치 필요 없이 프로젝트 의존성만으로 관리한다. 메모리가 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화 된다는 점을 이용하여 테스트 용도로 많이 사용 한다.
    testCompile('org.springframework.boot:spring-boot-starter-test')
    //자동완성 가능 ctrl+ space
    //단 특정 버전을 명시하면 안된다. 버전을 명시하지 않아야만 맨위에 작성한 org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion} 의 버전을 따라간다.
    // 이렇게 관리할 경우 각 라이브러리들의 버전관리가 한곳에 집중되고 버전 충돌 문제도 해결된다.
}

